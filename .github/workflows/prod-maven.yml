# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:

  ci:
    if: github.event.pull_request.merged == true
    name: Continuous Integration - Deployment
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - uses: falti/dotenv-action@v0.2.5
        id: dotenv
        with:
          path: ./config/dev.env
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4

      - name: Run unit tests
        run: mvn -B verify
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Unit Test Results
          files: ./target/surefire-reports/*.xml
          report_individual_runs: true
          deduplicate_classes_by_file_name: false
      - uses: jwgmeligmeyling/pmd-github-action@master
        if: always()
        with:
          path: '**/pmd.xml'
      - uses: jwgmeligmeyling/spotbugs-github-action@master
        if: always()
        with:
          path: '**/spotbugsXml.xml'
      - name: Upload Jacoco coverage report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: jacoco-report
          path: target/site/jacoco/
      - uses: codecov/codecov-action@v1
        if: always()
        with:
          file: target/site/jacoco/jacoco.xml
          fail_ci_if_error: false
      - name: Build Docker image
        run: docker build --file ./src/main/docker/Dockerfile --tag ${{ steps.dotenv.outputs.DOCKER_REPOSITORY}}/${{ steps.dotenv.outputs.APP}}-${{ steps.dotenv.outputs.APP_MODULE}}:latest ./
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Push image
        run: docker push ${{ steps.dotenv.outputs.DOCKER_REPOSITORY}}/${{ steps.dotenv.outputs.APP}}-${{ steps.dotenv.outputs.APP_MODULE}}:latest